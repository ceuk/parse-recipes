service: recipe-parser
provider:
  name: aws
  runtime: nodejs12.x
  profile: personal
  region: eu-west-2
plugins:
  - serverless-webpack
custom:
  webpack:
    includeModules: true
functions:
  parse:
    handler: handler.parse
    events:
      - http:
          path: parse
          method: post
          integration: lambda
          authorizer:
            name: apiGatewayAuthorizer
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer
resources: # CloudFormation template syntax from here on.
  Resources:
    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: recipe-app-users
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    cognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: recipe-app-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: cognitoUserPool
    apiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [cognitoUserPool, Arn]
    recipesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: recipes
        AttributeDefinitions:
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: title
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
